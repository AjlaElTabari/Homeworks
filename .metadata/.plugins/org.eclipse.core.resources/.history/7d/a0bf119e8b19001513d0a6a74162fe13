package ba.bitcamp.homework_weekend5.task3and4;

import ba.bitcamp.homework_weekend5.task1.StoryCharacter;
import ba.bitcamp.homework_weekend5.task2.Goal;

public class Protagonist extends StoryCharacter {
	
	private static final int MAX_ALLIES = 3;
	private Goal goal;
	private StoryCharacter[] allies;
	private StoryCharacter enemy;
	
	/**
	 * @param name
	 * @param sex
	 * @param isCapable
	 * @param goal
	 */
	public Protagonist(String name, boolean sex, boolean isCapable, Goal goal) {
		super(name, sex, isCapable);
		this.goal = goal;
		this.enemy = null;
	}

	/**
	 * @return the goal
	 */
	public Goal getGoal() {
		return goal;
	}

	/**
	 * @param goal the goal to set
	 */
	public void setGoal(Goal goal) {
		this.goal = goal;
	}

	/**
	 * @return the allies
	 */
	public StoryCharacter[] getAllies() {
		return allies;
	}

	/**
	 * @return the enemy
	 */
	public StoryCharacter getEnemy() {
		return enemy;
	}

	/**
	 * @param enemy the enemy to set
	 */
	public void setEnemy(StoryCharacter enemy) {
		this.enemy = enemy;
	}

	/**
	 * @param allies[] allies to set
	 */
	public void setAllies(StoryCharacter[] allies) {
		if(allies.length < MAX_ALLIES){
			this.allies = allies;
		} else {
			
			throw new ArrayIndexOutOfBoundsException("No more allies allowed!");
		}
	}
	
	public void addAlly(StoryCharacter ally) {		
		StoryCharacter[] newAllies = null;
		int alliesNo = 0;
		if (allies != null) {
			alliesNo = allies.length;
			if(alliesNo == MAX_ALLIES) {
				throw new ArrayIndexOutOfBoundsException("No more allies allowed!");
			} else {
				newAllies = new StoryCharacter[alliesNo + 1];
				for (int i = 0; i < newAllies.length; i++) {
					if (i < allies.length) {
						newAllies[i] = allies[i];
					} else {
						newAllies[i] = ally;
					}
				}
			}
		}
		allies = newAllies;
	}
	
	public void attainGoal() {
		if(isAlive()) {
			int chance = 0;
			if(isCapable()){
				if (chance + 40 < 100) {
					chance += 40;
				} else {
					chance = 100;
				}
			}
			for (int i = 0; i < allies.length; i++) {
				if(allies[i].isCapable()){
					if (chance + 20 < 100) {
						chance += 20;
					} else {
						chance = 100;
					}
				}
			}
			if(enemy.isCapable()){
				if (chance - 30 > 0) {
					chance -= 30;
				} else {
					chance = 0;
				}
			}
			if(goal.getDifficulty() == Goal.HARD){
				if (chance - 20 > 0) {
					chance -= 20;
				} else {
					chance = 0;
				}
			} else if (goal.getDifficulty() == Goal.IMPOSSIBLE) {
				// if goal is impossible chances will be decreased by 100%,
				// but it cannot go under 0 %, so we will set it to zero, immediately
				chance = 0;
			}
			hasSucceeded(chance);
		} else {
			System.out.println("Your protagonist is already dead :(");
		}
	}
	
	private void hasSucceeded(int chance){
		if(chance >= 50){
			System.out.println(getName() + " succeded in " + goal.getName() + ".");
			int randomAllyIndex = (int)Math.random() * 3 + 1;
			if (!allies[randomAllyIndex].isCapable()) {
				allies[randomAllyIndex].becameCapable();
			}
		} else {
			System.out.println(getName() + " failed in " + goal.getName() + ".");
			int randomAllyIndex = (int)Math.random() * 3 + 1;
			if (!allies[randomAllyIndex].isCapable()) {
				allies[randomAllyIndex].becameCapable();
			}
			randomAllyIndex = (int)Math.random() * 3 + 1;
			if (!allies[randomAllyIndex].isAlive()) {
				allies[randomAllyIndex].killCharacter();
			}
		}
	}
	
}
